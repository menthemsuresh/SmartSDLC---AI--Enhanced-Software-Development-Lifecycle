# -*- coding: utf-8 -*-
"""Copy of Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H_0ZYzFVPPpNmiECu4izPuBQfFOkLmj-
"""

import gradio as gr
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

# Load Falcon model
model_name = "tiiuae/falcon-rw-1b"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="auto",
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32
)

# AI response generator
def get_ai_response(prompt):
    inputs = tokenizer(prompt, return_tensors="pt").to(model.device)
    with torch.no_grad():
        result = model.generate(**inputs, max_new_tokens=200, do_sample=True, temperature=0.7)
    output = tokenizer.decode(result[0], skip_special_tokens=True)
    return output.replace(prompt, "").strip()

# Health Q&A
def answer_question(question):
    prompt = f"You are a medical assistant. Answer this:\nQ: {question}\nA:"
    return get_ai_response(prompt)

# Symptom Checker
def check_symptoms(symptoms, duration, severity):
    prompt = f"""Symptoms: {symptoms}
Duration: {duration}
Severity: {severity}/10

Provide:
- Possible illness
- Advice
- When to visit a doctor
A:"""
    return get_ai_response(prompt)

# Treatment Plan
def treatment_plan(condition, age, existing_issues, medications):
    prompt = f"""Condition: {condition}
Age: {age}
Existing Conditions: {existing_issues}
Medications: {medications}

Give:
- Medicine
- Diet
- Lifestyle
- Follow-up
A:"""
    return get_ai_response(prompt)

# BMI Calculator
def calculate_bmi(height_cm, weight_kg):
    try:
        if height_cm == 0:
            return "Height cannot be 0."
        height_m = height_cm / 100
        bmi = weight_kg / (height_m ** 2)
        if bmi < 18.5:
            category = "Underweight"
        elif bmi < 25:
            category = "Normal"
        elif bmi < 30:
            category = "Overweight"
        else:
            category = "Obese"
        return f"BMI: {bmi:.2f} ({category})"
    except Exception as e:
        return f"Error: {str(e)}"

# Interface for each tool
qa_interface = gr.Interface(fn=answer_question, inputs="text", outputs="text", title="Health Q&A")

symptom_interface = gr.Interface(
    fn=check_symptoms,
    inputs=[
        gr.Textbox(label="Describe Symptoms"),
        gr.Dropdown(["<1 day", "1-3 days", "4-7 days", "1-2 weeks", ">2 weeks"], label="Duration"),
        gr.Slider(1, 10, value=5, label="Severity")
    ],
    outputs="text",
    title="Symptom Checker"
)

treatment_interface = gr.Interface(
    fn=treatment_plan,
    inputs=[
        gr.Textbox(label="Condition"),
        gr.Number(label="Age"),
        gr.Textbox(label="Existing Conditions"),
        gr.Textbox(label="Medications")
    ],
    outputs="text",
    title="Treatment Plan Generator"
)

bmi_interface = gr.Interface(
    fn=calculate_bmi,
    inputs=[
        gr.Number(label="Height (cm)"),
        gr.Number(label="Weight (kg)")
    ],
    outputs="text",
    title="BMI Calculator"
)

# Combine all tools into one tabbed UI
gr.TabbedInterface(
    [qa_interface, symptom_interface, treatment_interface, bmi_interface],
    tab_names=["Q&A", "Symptom Checker", "Treatment Plan", "BMI Calculator"]
).launch(share=True)